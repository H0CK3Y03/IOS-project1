#!/bin/sh
# Login: xvesela00
# Autor: Adam Vesely
# Datum: 10.3.2024

export POSIXLY_CORRECT=yes
export LC_ALL=C
trader_error="No user found!"
date_error="No date found"
currency_error="No currency found"
file_error="No files found"
if [ "$XTF_PROFIT" = "" ]
    then
        export XTF_PROFIT=20
fi
# set -e
# set -x # debugs the script

# zcat "$FILES"
# same as surrounding it with backticks, but this is better (you can nest $($(...)))
# DATE=$(date +'%Y-%m-%d %H:%M:%S') # this is the format that the dates should be in
# If no arguments were passed
if [ "$#" = 0 ]
    then
        # prints an error message from 1 (stdout) to 2 (stderr)
        echo "ERROR: Wrong usage." >&2
        echo "Use: \"./xtf -h\" or \"./xtf -help\" for more info."
        exit 1
fi
check_args() {
    if [ "$1" = "" ]
        then
            echo "ERROR: $2. Use \"-h\" or \"--help\" for more info." >&2
            exit 1
    fi
}
check_all() {
    check_args "$TRADER" "$trader_error"
    check_args "$FILES" "$file_error"
}
check_date() {
    awk -P -F ";" '
    {
        if(match($1, /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-2][0-9]:[0-5][0-9]:[0-5][0-9]/))
            ;
        else
            exit 1
    }'
}
check_currency() {
    awk -F ";" '
    {
        if(match($1, /^[A-Za-z]{3}$/))
            ;
        else
            exit 1
    }'
}
check_file() {
    awk -P -F ";" '
    {
        if(match($1, /..*/) && match($2, /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-2][0-9]:[0-5][0-9]:[0-5][0-9]/) && match($3, /[A-Za-z]{3}/) && match($4, /[-]?[0-9][., 0-9]*$/))
            ;
        else
            exit 1
    }'
}
check_permissions() {
    if [ ! -r "$1" ]
        then
            echo "ERROR: Permission denied!" >&2
            exit 1
    fi
}
error_output() {
    if [ "$1" = 1 ]
        then
            echo "ERROR!" >&2
            exit 1
    fi
}
add_file() {
    if [ $file_count = 0 ]
        then
            FILES="$1"
            file_count=1
        else
            FILES="$FILES $1" # to FILES, writes all existing plus new file
            _=$((file_count+=1)) # increments the file_count
    fi
}
add_currency() {
    if [ $currency_count = 0 ]
        then
            CURRENCIES="$1"
            currency_count=1
        else
            CURRENCIES="$CURRENCIES $1" # to CURRENCIES, writes all existing plus new currency
            _=$((currency_count+=1)) # increments the currency_count
    fi
}
merge_files() {
    for file in $FILES
        do
            if echo "$file" | grep -q "\.log$"
                then
                    cat "$file" | list
            elif echo "$file" | grep -q "\.gz$"
                then
                    zcat "$file" | list
            else
                echo "ERROR: Wrong file!" >&2
                exit 1
            fi
            echo "$COMMAND"
        done | $COMMAND
}
# prints the usage of the script
help() {
    echo ""
    echo "Usage of \"./xtf\":"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "./xtf [-h|--help] [FILTER] [COMMAND] TRADER LOG [LOG2 [...]"
    echo "--------------------------------------------------------------------"
    echo ""
    echo "\"-h\" | \"--help\" -> prints info on how to use the script"
    echo ""
    echo "TRADER -> the user"
    echo ""
    echo "FILTER -> a combination of:"
    echo "  \"-a DATETIME\" -> considers records after the specified date (non-inclusive)"
    echo "  \"-b DATETIME\" -> considers records before the specified date (non-inclusive)"
    echo "  \"-c CURRENCIES\" -> considers records containing the specified currencies"
    echo ""
    echo "The date format is: YYYY-MM-DD HH:MM:SS"
    echo ""
    echo "COMMAND -> can be one of:"
    echo "  \"list\" -> displays a list of records for a specified TRADER"
    echo "  \"list-CURRENCIES\" -> displays a list of sorted records for a CURRENCIES"
    echo "  \"status\" -> displays the actual account status grouped and sorted by currencies"
    echo "  \"profit\" -> displays the account status with theoretical income grouped and sorted by currencies"
    echo ""
}
list() {
    awk -P -F ";" -v user="$TRADER" -v date_after="$DATETIME_AFTER" -v date_before="$DATETIME_BEFORE" -v currencies="$CURRENCIES" ' 
    {
        if (currencies != "") {
            num_of_currencies=split(currencies, currency_list, " ") 
            # split returns number of values in the array
        }
        else {
            num_of_currencies = 1
            currency_list[1] = ""
        }
        for(i=1; i<=num_of_currencies; i++) {
            if ($1 == user && ($2 > date_after || date_after == "") && ($2 < date_before || date_before == "") && ($3 == currency_list[i] || currency_list[i] == "")) {
                print $0
            }
        }
    }'
}
list_currency() {
    list | awk -P -F ";" ' {print $3}' | sort -u
}
status() {
    list | awk -P -F ";" -v currencies="$CURRENCIES" '
    BEGIN {
        # Split the passed currencies into an array
        split(currencies, currency_array, " ")
    }

    {
        # make an associative array (key:value) and keep a sum for each currency
        # $3 is a currency, $4 is the value
        sum[$3] += $4
    }

    END {
        # Print the sums for each currency
        for(currency in sum) {
            # C type printing (to print 4 decimal points)
            printf "%s : %.4f\n", currency, sum[currency]
        }
    }' | sort -k1
}

profit() {
    status | awk -P -F " : " -v profit="$XTF_PROFIT" '
    {
        if($2 < 0) {
           fict_sum[$1] += $2
        }
        else {
            fict_sum[$1] += $2 + ($2 * (profit / 100))
        }
    }
    END {
        for(currency in fict_sum) {
            printf "%s : %.4f\n", currency, fict_sum[currency]
        }
    }' | sort -k1
}
COMMAND=list
command_set=0
file_count=0
currency_count=0
# Arg parsing
# while the number of filters is greater than (-gt) zero
while [ "$#" -gt 0 ]
    do
        case "$1" in
        # checks if the first argument is equal to:

            -h|--help)
                help
                exit 0
                ;;

            -a)
                # shifts all args to the left ($2 becomes $1)
                shift
                if [ "$DATETIME_AFTER" != "" ]
                    then
                        echo "ERROR: Only one date_after is allowed!" >&2
                        exit 1
                fi
                echo "$1" | check_date
                error_output "$?"
                # exits with exit 1 if last error code was 1
                DATETIME_AFTER="$1" # after the date (non-inclusive)
                shift
                ;;

            -b)
                shift
                if [ "$DATETIME_BEFORE" != "" ]
                    then
                        echo "ERROR: Only one date_before is allowed!" >&2
                        exit 1
                fi
                echo "$1" | check_date
                error_output "$?"
                DATETIME_BEFORE="$1" # before the date (non-inclusive)
                shift
                ;;

            -c)
                shift
                echo "$1" | check_currency
                error_output "$?"
                add_currency "$1"
                shift
                ;;

            list|list-currency|status|profit)
            # checks if a command has already been specified
                if [ "$command_set" = 1 ]
                    then
                        echo "ERROR: Only one command is allowed!" >&2
                        exit 1
                fi
                COMMAND="$1"
                if [ "$COMMAND" = "list-currency" ]
                    then
                        COMMAND=list_currency
                fi
                command_set=1
                shift
                ;;

            *)
                # uses grep and regex to check the type of the file
                if echo "$1" | grep -q "\.log$"
                # .log files
                    then
                        # sends the contents of the file to the specified command
                        add_file "$1"
                        check_all
                        cat "$1" | check_file
                        error_output "$?"
                        check_permissions "$1"
                        if [ "$COMMAND" = "list" ] || [ $COMMAND = "list_currency" ]
                            then
                                cat "$1" | $COMMAND
                        fi
                elif echo "$1" | grep -q "\.gz$"
                # .gz files
                    then
                        add_file "$1"
                        check_all
                        zcat "$1" | check_file
                        error_output "$?"
                        check_permissions "$1"
                        if [ "$COMMAND" = "list" ] || [ $COMMAND = "list_currency" ]
                            then
                                zcat "$1" | $COMMAND
                        fi
                else
                # the user
                    if [ "$TRADER" != "" ]
                        then
                            echo "ERROR: Max 1 user. Use \"-h\" or \"--help\" for more info." >&2
                            exit 1
                    fi
                    # If a user is not set, set the user
                    TRADER="$1"
                fi
                shift
                ;;
        esac
    done
if [ "$COMMAND" = "status" ] || [ "$COMMAND" = "profit" ]
    then
        merge_files
fi
# End of filter parsing
# echo "$file_count"
# check_args "$FILES" "$file_error"

# =${XTF_PROFIT:-20} if XTF_PROFIT is not set, then set it to 20
# echo -e na \n asi dobre, cojaviem
# time ./test_xtf.sh 2> /dev/null > /dev/null     ||||| na testy rychlosti potom
# cut -> vyberanie stlpcov podla oddelovaca
# getline seems useful in awk
# make seperate function for parsing names and FILESs, then use return to pipe elsewhere
# set -e  -> should help with exiting parent shell from subshell -> every non-zero exit code turns off the script
# gzip -de  -> instead of zcat if needed
# date -d > /dev/null
#  if ! Echo file | grep -qE regex  -> for exiting out of awk from a pipeline?
# time ./xtf big_file.log  > /dev/null  -> for checking time, 0.881 is time to beat