#!/bin/sh
# Login: xvesela00
# Autor: Adam Vesely
# Datum: 10.3.2024

export POSIXLY_CORRECT=yes
export LC_ALL=C

# zcat "$file"
# same as surrounding it with backticks, but this is better (you can nest $($(...)))
# DATE=$(date +'%Y-%m-%d %H:%M:%S') # this is the format that the dates should be in
# If no arguments were passed
if [ "$#" = 0 ]
    then
        # prints an error message from 1 (stdout) to 2 (stderr)
        echo "ERROR: Wrong usage." >&2
        echo "Use: \"./xtf -h\" or \"./xtf -help\" for more info."
        exit 1
fi
check_file() {
    if [ "$FILE" = "" ]
    then
        echo "ERROR: No file detected" >&2
        exit 1
    fi
}
# prints the usage of the script
help() {
    echo ""
    echo "Usage of \"./xtf\":"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "./xtf [-h|--help] [FILTER] [COMMAND] TRADER LOG [LOG2 [...]"
    echo "--------------------------------------------------------------------"
    echo ""
    echo "\"-h\" | \"--help\" -> prints info on how to use the script"
    echo ""
    echo "TRADER -> the user"
    echo ""
    echo "FILTER -> a combination of:"
    echo "  \"-a DATETIME\" -> considers records after the specified date (non-inclusive)"
    echo "  \"-b DATETIME\" -> considers records before the specified date (non-inclusive)"
    echo "  \"-c CURRENCY\" -> considers records containing the specified currencies"
    echo ""
    echo "COMMAND -> can be one of:"
    echo "  \"list\" -> displays a list of records for a specified TRADER"
    echo "  \"list-currency\" -> displays a list of sorted records for a CURRENCY"
    echo "  \"status\" -> displays the actual account status grouped and sorted by currencies"
    echo "  \"profit\" -> displays the account status with theoretical income grouped and sorted by currencies"
    echo ""
}
list() {
    if [ "$TRADER" = "" ]
        then
            echo "$FILE"
            exit 0
    fi
}
list_currency() {
    if [ "$TRADER" = "" ]
        then
            echo "$FILE"
            exit 0
    fi
}
status() {
    echo status
}
profit() {
    echo profit
}
COMMAND=list
command_set=1
# Arg parsing
# while the number of args is greater than (-gt) zero
while [ "$#" -gt 0 ]
    do
        case "$1" in
        # checks if the first argument is equal to:

            -h|--help)
                help
                exit 0
                ;;

            -a)
                # shifts all args to the left ($2 becomes $1)
                shift
                if [ "$1" = "" ]
                    then
                        echo "ERROR: No parameter passed for argument. Use \"-h\" or \"--help\" for more info." >&2
                        exit 1
                fi

                DATETIME="$1" # after the date (non-inclusive)
                shift
                ;;

            -b)
                shift
                if [ "$1" = "" ]
                    then
                        echo "ERROR: No parameter passed for argument. Use \"-h\" or \"--help\" for more info." >&2
                        exit 1
                fi

                DATETIME="$1" # before the date (non-inclusive)
                shift
                ;;

            -c)
                shift
                if [ "$1" = "" ]
                    then
                        echo "ERROR: No parameter passed for argument. Use \"-h\" or \"--help\" for more info." >&2
                        exit 1
                fi

                CURRENCY="$1"
                shift
                ;;

            *.gz)
                FILE=$(zcat "$1")
                # zcat "$1" | 
                shift
                ;;

            *.log)
                FILE=$(cat "$1")
                # cmd "$1" | 
                shift
                ;;

            list|list-currency|status|profit)
            # checks if a command has already been specified
                if [ $command_set = 0 ]
                    then
                        echo "ERROR: Only one command is allowed!" >&2
                        exit 1
                fi
                COMMAND="$1"
                command_set=0
                shift
                ;;

            *)
                TRADER="$1"
                shift
                ;;
        esac
    done
# End of arg parsing

# Checks for the file
if [ "$FILE" = "" ]
    then
        echo "ERROR: No file detected" >&2
        exit 1
fi

case "$COMMAND" in
    list) list ;;
    list-currency) list_currency ;;
    status) status ;;
    profit) profit ;;
esac

# =${XTF_PROFIT:-20} if XTF_PROFIT is not set, then set it to 20
# skús dať za ten sort ešte | awk 'NF'
# echo -e na \n asi dobre, cojaviem
# na spracovanie suboru : subshell eval pipe  ---> what the fuck ????
# v date si vies naspecifikovat format || date -d abo daco take idkkk xddd
# TRADER straight to awk? idk
# time ./test_xtf.sh 2> /dev/null > /dev/null     ||||| na testy rychlosti potom
# uniq -> proti dupllicitnym riadkom
# grep na vyberanie specifickych riadkov
# napr. fgrep -> fast grep, snad moze byt, uvidime
# cut -> vyberanie stlpcov podla oddelovaca
# awk is the best for structured files (like columns...)
# : $1 = 1st column in awk
# $24tildaAHOJ -> if AHOJ in 24th column, print